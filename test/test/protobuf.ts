import * as assert from "assert";
import * as fs from "fs";
import { Chat, Message, WebMessageInfo, MessageKey } from "whatsapp_pb";
import { writeNode } from "@/whatsapp/binary/writer";
import BinaryOutputStream from "@/whatsapp/binary/output-stream";

export default function () {
    const plainObj = {
        id: 'AEDF49F7E5FD1F',
        displayname: 'Sample Display Name'
    }
    const chat = new Chat();
    chat.setDisplayname(plainObj.displayname)
    chat.setId(plainObj.id)
    const bin = chat.serializeBinary()
    const chatRead = Chat.deserializeBinary(bin)
    const obj = chatRead.toObject()
    assert.equal(obj.displayname, plainObj.displayname)
    assert.equal(obj.id, plainObj.id)

    // This message is generated by WA Web when sending message, sent as action node
    const buf = fs.readFileSync("etc/binary-sample/sent-message.proto.bin")
    const msg = WebMessageInfo.deserializeBinary(buf)

    assert.equal(msg.getStatus(), 1)
    assert.equal(msg.getMessagetimestamp(), 1589871077)

    assert.ok(msg.getKey())
    assert.equal(msg.getKey().getRemotejid(), '628997026464@s.whatsapp.net')
    assert.equal(msg.getKey().getFromme(), true)
    // Where id come from?
    assert.equal(msg.getKey().getId(), '3EB082A541839959E947')

    assert.ok(msg.getMessage())
    // Content of the message
    assert.ok(msg.getMessage().getConversation(), 'tttest')
    const msg1BufNode = new BinaryOutputStream()
    writeNode(msg1BufNode, ['message', null, msg.serializeBinary()])
    assert.equal(msg1BufNode.buf.length, msg1BufNode.size)
    //console.log(msg1BufNode);

    // Recreate msg
    const msgNew = new Message()
    const key = new MessageKey()
    const msg2 = new WebMessageInfo()
    const msgId = msg.getKey().getId()
    const jid = '628997026464@c.us'
    const message = msg.getMessage().getConversation()
    key.setId(msgId)
    key.setRemotejid(jid)
    key.setFromme(true)
    msgNew.setConversation(message)
    msg2.setKey(key)
    msg2.setMessage(msgNew)
    msg2.setMessagetimestamp(msg.getMessagetimestamp())
    msg2.setStatus(1)
    ////console.log(msg2.toObject())
    const msg2BufNode = new BinaryOutputStream()
    writeNode(msg2BufNode, ['message', null, msg.serializeBinary()])
    //console.log(msg2BufNode);
    assert.equal(msg2BufNode.buf.compare(msg1BufNode.buf), 0);
}